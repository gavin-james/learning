import java.text.SimpleDateFormat

// 针对多模块 打包的策略
buildscript {
    // 自定义参数
    ext {
        // 具体版本依赖可以去 https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E 找相应的版本
        springBootVersion = "2.3.12.RELEASE"
        springCloudVersion = "Hoxton.SR12"
        xnioVersion = "3.8.7.Final"
    }


    // springboot gradle 打包插件依赖
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// 所有项目配置
allprojects {
    // java增强
    apply plugin: 'java-library'
    // springboot插件
    apply plugin: "org.springframework.boot"
    // spring依赖管理插件
    apply plugin: "io.spring.dependency-management"

    // 项目信息
    group = "com.gavin.james"
    // 版本
    version = "0.0.1-SNAPSHOT"

    // 将子项目打成jar包
    java {
        // 定义您的源文件应该被视为哪种语言版本的 Java。
        sourceCompatibility JavaVersion.VERSION_1_8
        // 定义您的代码应该运行的最低 JVM 版本，即它确定编译器生成的字节码版本。
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 依赖范围配置修改
    configurations {
        // 修改annotationProcessor 使其可以继承
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
    // 设置打包后缀
    tasks.named("jar") {
        archiveClassifier.set("")
    }
    // 指定编码格式 第一种方法
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    // 测试配置
    test {
        useJUnitPlatform()
    }
}

// 子项目设置
subprojects {
    // 依赖管理
    dependencyManagement {
        imports {
            // Spring-Cloud 依赖
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
        dependencies {
            dependency("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
                exclude "org.springframework.boot:spring-boot-starter-tomcat"
            }
            dependency("org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}") {
                exclude "org.jboss.xnio:xnio-nio"
            }
            dependency 'com.squareup.okhttp3:okhttp:4.10.0'
            dependency "org.jboss.xnio:xnio-nio:${xnioVersion}"
        }
    }

    // 全局依赖
    dependencies {
        // 注解依赖
        annotationProcessor(
                // lombok 简化开发
                "org.projectlombok:lombok"
        )

        // 测试依赖
        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        }
    }
}